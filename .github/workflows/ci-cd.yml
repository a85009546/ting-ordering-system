name: CI/CD Workflow

on:
  push:
    branches:
      - main # 監聽 main 分支的變動
  pull_request:
    branches:
      - main  # 監聽從其他分支的 PR 請求

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v2

      - name: 設定 JDK 環境
        uses: actions/setup-java@v2
        with:
              distribution: 'temurin'   # 指定 Java 版本的發行版（必填）
              java-version: '17'        # 你要使用的 Java 版本
              maven-version: '3.9.4'    # 可選，指定 Maven 版本
              cache: 'maven'            # 啟用 Maven 依賴快取，加速構建

      - name: 檢查 Maven 是否安裝成功
        run: |
          mvn -version  # 確認 Maven 是否可用
          which mvn     # 確認 Maven 安裝路徑

      - name: 編譯 JAR 檔案
        run: |
          cd backend/ # 進入後端目錄
          mvn clean package -DskipTests  # 這將使用 Maven 生成 JAR 檔案
          cd .. # 回到專案根目錄

      - name: 構建前端應用
        run: |
          cd frontend/  # 進入前端目錄
          npm install   # 安裝前端依賴
          npm run build  # 生成 dist 目錄
          cd .. # 回到專案根目錄
      
      - name: 設定 Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 安裝 Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: 設置 Docker Compose
        run: |
          docker-compose -f docker-compose.yaml build
      
      - name: 啟動服務
        run: |
          docker-compose -f docker-compose.yaml up -d

